/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "Solver.h"
#include "Dimacs.h"
#include "SolverTypes.h"
#include "ClauseInfo.h"

#include <zlib.h>
#include <vector>
#include <cassert>
using namespace Minisat;




Lit int2Lit(int x)
{
        assert(x != 0);
        int v = abs(x) - 1;
        return x > 0 ? mkLit(v) : ~mkLit(v);
}

int Lit2int(Lit x)
{
        return sign(x) ? -(var(x)+1) : (var(x)+1);
}

void vec2std(const vec<Lit> &src, std::vector<int> &dst)
{
        int n = src.size();
        for(int i = 0; i < n; ++i)
                dst.push_back(Lit2int(src[i]));
}

void std2vec(const std::vector<int> &src, vec<Lit> &dst)
{
        int n = src.size();
        for(int i = 0; i < n; ++i)
                dst.push(int2Lit(src[i]));
}


SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ClauseInfo >::const_reference std_vector_Sl_ClauseInfo_Sg__get(std::vector< ClauseInfo > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ClauseInfo_Sg__set(std::vector< ClauseInfo > *self,int i,std::vector< ClauseInfo >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void Solver_add_learnt(Solver *self,std::vector< int > const &v,float act){
                        vec<Lit> vec;
                        std2vec(v, vec);
                        self->addLearnt(vec, act);
                }
SWIGINTERN void Solver_toDimacs(Solver *self,char const *f,std::vector< int > as){
                        vec<Lit> vec;
                        std2vec(as, vec);
                        self->toDimacs(f, vec);
                }
SWIGINTERN std::vector< ClauseInfo > &Solver_get_learnts(Solver *self,std::vector< ClauseInfo > &to){
                        to.clear();
                        for(int i = 0; i < self->learnts.size(); i++)
                        {
                                Clause & c = self->ca[self->learnts[i]];
                                std::vector<int> v;
                                for(int j = 0; j < c.size(); j++)
                                {
                                        Lit & l = c[j];
                                        v.push_back(Lit2int(l));
                                }

                                ClauseInfo ci;
                                ci.literals = v;
                                ci.activity = c.activity();
                                ci.lbd = c.lbd();
                                to.push_back(ci);
                        }
                        return to;
                }
SWIGINTERN void Solver_prueba(Solver *self,char const *pathname){
                        char bufi[1024]; int leidos = 0;
                        fprintf(stderr, "Vamos a leer de: %s\n", pathname);
                        gzFile in = gzopen(pathname, "rb");
                        if(in == NULL) {
                                fprintf(stderr, "ERROR abriendo el archivo\n");
                        } else {
                                fprintf(stderr, "Abrimos el archivo OK\n");
                                leidos = gzread(in, bufi, sizeof(bufi));
                                fprintf(stderr, "Hemos leido %d bytes\n", leidos);
                                gzclose(in);
                                fprintf(stderr, "Cerramos el archivo OK\n");
                        }
                }
SWIGINTERN bool Solver_read(Solver *self,char const *pathname){
                        if(self->nVars() > 0)
                                fprintf(stderr, "Warning: reading on nonempty state\n");
                        fprintf(stderr, "Vamos a leer de: %s\n", pathname);
                        gzFile in = gzopen(pathname, "rb");
                        if(in == NULL)
                        {
                                fprintf(stderr, "ERROR abriendo el archivo\n");
                                return 0;
                        }
                        fprintf(stderr, "Abrimos el archivo\n");
                        parse_DIMACS(in, *self);
                        fprintf(stderr, "Parseamos el contenido\n");
                        gzclose(in);
                        fprintf(stderr, "Cerramos el archivo\n");
                        return self->simplify();
                }
SWIGINTERN void Solver_add_vars(Solver *self,int upto){
                        int v = abs(upto);
                        while(self->nVars() <= v)
                                self->newVar();
                }
SWIGINTERN bool Solver_add_clause(Solver *self,std::vector< int > const &lits){
                        int n = lits.size();
                        vec<Lit> ps(n);
                        int vmax = -1;
                        for(int i = 0; i < n; ++i) {
                                ps[i] = int2Lit(lits[i]);
                                if(var(ps[i]) > vmax) vmax = var(ps[i]);
                        }
                        while(self->nVars() <= vmax) self->newVar();
                        return self->addClause_(ps);
                }
SWIGINTERN bool Solver_solve__SWIG_1(Solver *self,std::vector< int > const &assumptions){
                        vec<Lit> assumps;
                        std2vec(assumptions, assumps);
                        return self->solve(assumps);
                }
SWIGINTERN char Solver_solve_limited(Solver *self,std::vector< int > const &assumptions){
                        vec<Lit> assumps;
                        std2vec(assumptions, assumps);
                        lbool res = self->solveLimited(assumps);
                        return res == l_True ? 'S' : (res == l_False ? 'U' : 'I');
                }
SWIGINTERN void Solver_set_conf_budget(Solver *self,unsigned long conflicts){ self->setConfBudget(conflicts); }
SWIGINTERN void Solver_set_prop_budget(Solver *self,unsigned long propagations){ self->setPropBudget(propagations); }
SWIGINTERN void Solver_set_time_budget(Solver *self,double seconds){ self->setTimeBudget(seconds); }
SWIGINTERN void Solver_set_budget_off(Solver *self){ self->budgetOff(); }
SWIGINTERN char Solver_eval(Solver const *self,int lit){
                        lbool res = self->value(int2Lit(lit));
                        return res == l_True ? '1' : (res == l_False ? '0' : '?');
                }
SWIGINTERN char Solver_eval_model(Solver const *self,int lit){
                        lbool res = self->modelValue(int2Lit(lit));
                        return res == l_True ? '1' : (res == l_False ? '0' : '?');
                }
SWIGINTERN std::vector< int > Solver_conflict(Solver *self){
                        std::vector<int> result;
                        vec2std(self->conflict, result);
                        return result;
                }
SWIGINTERN int Solver_num_vars(Solver const *self){ return self->nVars();     }
SWIGINTERN int Solver_num_freevars(Solver const *self){ return self->nFreeVars(); }
SWIGINTERN int Solver_num_assigns(Solver const *self){ return self->nAssigns();  }
SWIGINTERN int Solver_num_clauses(Solver const *self){ return self->nClauses();  }
SWIGINTERN int Solver_num_learnts(Solver const *self){ return self->nLearnts();  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1intseq_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1intseq_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_intseq_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_intseq_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_intseq_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_intseq_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_intseq_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_minisatJNI_intseq_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_minisatJNI_intseq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_intseq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_minisatJNI_delete_1intseq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_ClauseInfo_1getLBD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ClauseInfo *arg1 = (ClauseInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClauseInfo **)&jarg1; 
  result = (int)(arg1)->getLBD();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minisatJNI_ClauseInfo_1getActivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ClauseInfo *arg1 = (ClauseInfo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClauseInfo **)&jarg1; 
  result = (double)(arg1)->getActivity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_ClauseInfo_1getLiterals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ClauseInfo *arg1 = (ClauseInfo *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClauseInfo **)&jarg1; 
  result = (std::vector< int > *) &(arg1)->getLiterals();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1ClauseInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ClauseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ClauseInfo *)new ClauseInfo();
  *(ClauseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_delete_1ClauseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ClauseInfo *arg1 = (ClauseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClauseInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1clauseseq_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ClauseInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ClauseInfo > *)new std::vector< ClauseInfo >();
  *(std::vector< ClauseInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1clauseseq_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ClauseInfo >::size_type arg1 ;
  std::vector< ClauseInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ClauseInfo >::size_type)jarg1; 
  result = (std::vector< ClauseInfo > *)new std::vector< ClauseInfo >(arg1);
  *(std::vector< ClauseInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_clauseseq_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  std::vector< ClauseInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  result = ((std::vector< ClauseInfo > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_clauseseq_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  std::vector< ClauseInfo >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  result = ((std::vector< ClauseInfo > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_clauseseq_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  std::vector< ClauseInfo >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  arg2 = (std::vector< ClauseInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_clauseseq_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  result = (bool)((std::vector< ClauseInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_clauseseq_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_minisatJNI_clauseseq_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  std::vector< ClauseInfo >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  arg2 = *(std::vector< ClauseInfo >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ClauseInfo >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ClauseInfo >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_clauseseq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  int arg2 ;
  std::vector< ClauseInfo >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ClauseInfo >::value_type *) &std_vector_Sl_ClauseInfo_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ClauseInfo >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_clauseseq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  int arg2 ;
  std::vector< ClauseInfo >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ClauseInfo >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ClauseInfo >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ClauseInfo_Sg__set(arg1,arg2,(ClauseInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_minisatJNI_delete_1clauseseq(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ClauseInfo > *arg1 = (std::vector< ClauseInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ClauseInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_new_1Solver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Solver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Solver *)new Solver();
  *(Solver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_delete_1Solver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Solver *arg1 = (Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Solver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (bool)(arg1)->simplify();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (bool)(arg1)->solve();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1okay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (bool)((Solver const *)arg1)->okay();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1add_1learnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  Solver *arg1 = (Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  Solver_add_learnt(arg1,(std::vector< int > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1toDimacs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Solver *arg1 = (Solver *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< int > arg3 ;
  std::vector< int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(std::vector< int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return ;
  }
  arg3 = *argp3; 
  Solver_toDimacs(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_Solver_1get_1learnts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  std::vector< ClauseInfo > *arg2 = 0 ;
  std::vector< ClauseInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = *(std::vector< ClauseInfo > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ClauseInfo > & reference is null");
    return 0;
  } 
  result = (std::vector< ClauseInfo > *) &Solver_get_learnts(arg1,*arg2);
  *(std::vector< ClauseInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1prueba(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Solver *arg1 = (Solver *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  Solver_prueba(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)Solver_read(arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1add_1vars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  Solver_add_vars(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1add_1clause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (bool)Solver_add_clause(arg1,(std::vector< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minisatJNI_Solver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (bool)Solver_solve__SWIG_1(arg1,(std::vector< int > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_minisatJNI_Solver_1solve_1limited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jchar jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (char)Solver_solve_limited(arg1,(std::vector< int > const &)*arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1set_1conf_1budget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Solver *arg1 = (Solver *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  Solver_set_conf_budget(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1set_1prop_1budget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Solver *arg1 = (Solver *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  Solver_set_prop_budget(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1set_1time_1budget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Solver *arg1 = (Solver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (double)jarg2; 
  Solver_set_time_budget(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minisatJNI_Solver_1set_1budget_1off(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Solver *arg1 = (Solver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  Solver_set_budget_off(arg1);
}


SWIGEXPORT jchar JNICALL Java_minisatJNI_Solver_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)Solver_eval((Solver const *)arg1,arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_minisatJNI_Solver_1eval_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)Solver_eval_model((Solver const *)arg1,arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minisatJNI_Solver_1conflict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = Solver_conflict(arg1);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_Solver_1num_1vars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (int)Solver_num_vars((Solver const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_Solver_1num_1freevars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (int)Solver_num_freevars((Solver const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_Solver_1num_1assigns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (int)Solver_num_assigns((Solver const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_Solver_1num_1clauses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (int)Solver_num_clauses((Solver const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minisatJNI_Solver_1num_1learnts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Solver *arg1 = (Solver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Solver **)&jarg1; 
  result = (int)Solver_num_learnts((Solver const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

