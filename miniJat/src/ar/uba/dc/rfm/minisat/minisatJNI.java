/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ar.uba.dc.rfm.minisat;

public class minisatJNI {
  public final static native long new_intseq__SWIG_0();
  public final static native long new_intseq__SWIG_1(long jarg1);
  public final static native long intseq_size(long jarg1, intseq jarg1_);
  public final static native long intseq_capacity(long jarg1, intseq jarg1_);
  public final static native void intseq_reserve(long jarg1, intseq jarg1_, long jarg2);
  public final static native boolean intseq_isEmpty(long jarg1, intseq jarg1_);
  public final static native void intseq_clear(long jarg1, intseq jarg1_);
  public final static native void intseq_add(long jarg1, intseq jarg1_, int jarg2);
  public final static native int intseq_get(long jarg1, intseq jarg1_, int jarg2);
  public final static native void intseq_set(long jarg1, intseq jarg1_, int jarg2, int jarg3);
  public final static native void delete_intseq(long jarg1);
  public final static native int ClauseInfo_getLBD(long jarg1, ClauseInfo jarg1_);
  public final static native double ClauseInfo_getActivity(long jarg1, ClauseInfo jarg1_);
  public final static native long ClauseInfo_getLiterals(long jarg1, ClauseInfo jarg1_);
  public final static native long new_ClauseInfo();
  public final static native void delete_ClauseInfo(long jarg1);
  public final static native long new_clauseseq__SWIG_0();
  public final static native long new_clauseseq__SWIG_1(long jarg1);
  public final static native long clauseseq_size(long jarg1, clauseseq jarg1_);
  public final static native long clauseseq_capacity(long jarg1, clauseseq jarg1_);
  public final static native void clauseseq_reserve(long jarg1, clauseseq jarg1_, long jarg2);
  public final static native boolean clauseseq_isEmpty(long jarg1, clauseseq jarg1_);
  public final static native void clauseseq_clear(long jarg1, clauseseq jarg1_);
  public final static native void clauseseq_add(long jarg1, clauseseq jarg1_, long jarg2, ClauseInfo jarg2_);
  public final static native long clauseseq_get(long jarg1, clauseseq jarg1_, int jarg2);
  public final static native void clauseseq_set(long jarg1, clauseseq jarg1_, int jarg2, long jarg3, ClauseInfo jarg3_);
  public final static native void delete_clauseseq(long jarg1);
  public final static native long new_Solver();
  public final static native void delete_Solver(long jarg1);
  public final static native boolean Solver_simplify(long jarg1, Solver jarg1_);
  public final static native boolean Solver_solve__SWIG_0(long jarg1, Solver jarg1_);
  public final static native boolean Solver_okay(long jarg1, Solver jarg1_);
  public final static native int Solver_nVars(long jarg1, Solver jarg1_);
  public final static native int Solver_nClauses(long jarg1, Solver jarg1_);
  public final static native void Solver_setVerbosity(long jarg1, Solver jarg1_, int jarg2);
  public final static native int Solver_getVerbosity(long jarg1, Solver jarg1_);
  public final static native void Solver_add_learnt(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_, float jarg3);
  public final static native double Solver_get_var_activity(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_get_assumptions(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_);
  public final static native long Solver_get_clause(long jarg1, Solver jarg1_, int jarg2, long jarg3, intseq jarg3_);
  public final static native void Solver_toDimacs(long jarg1, Solver jarg1_, String jarg2, long jarg3, intseq jarg3_);
  public final static native long Solver_get_learnts(long jarg1, Solver jarg1_, long jarg2, clauseseq jarg2_);
  public final static native void Solver_prueba(long jarg1, Solver jarg1_, String jarg2);
  public final static native boolean Solver_read(long jarg1, Solver jarg1_, String jarg2);
  public final static native void Solver_add_vars(long jarg1, Solver jarg1_, int jarg2);
  public final static native boolean Solver_add_clause(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_);
  public final static native void Solver_set_assumptions(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_);
  public final static native boolean Solver_solve__SWIG_1(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_);
  public final static native char Solver_solve_limited(long jarg1, Solver jarg1_, long jarg2, intseq jarg2_);
  public final static native void Solver_set_conf_budget(long jarg1, Solver jarg1_, long jarg2);
  public final static native void Solver_set_prop_budget(long jarg1, Solver jarg1_, long jarg2);
  public final static native void Solver_set_time_budget(long jarg1, Solver jarg1_, double jarg2);
  public final static native void Solver_set_budget_off(long jarg1, Solver jarg1_);
  public final static native char Solver_eval(long jarg1, Solver jarg1_, int jarg2);
  public final static native char Solver_eval_model(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_conflict(long jarg1, Solver jarg1_);
  public final static native int Solver_num_vars(long jarg1, Solver jarg1_);
  public final static native int Solver_num_freevars(long jarg1, Solver jarg1_);
  public final static native int Solver_num_assigns(long jarg1, Solver jarg1_);
  public final static native int Solver_num_clauses(long jarg1, Solver jarg1_);
  public final static native int Solver_num_learnts(long jarg1, Solver jarg1_);
}
